// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package presence

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PresenceClient is the client API for Presence service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PresenceClient interface {
	ServerUpdate(ctx context.Context, in *ServerUpdateRequest, opts ...grpc.CallOption) (*ServerUpdateResponse, error)
	ClientUpdate(ctx context.Context, in *ClientUpdateRequest, opts ...grpc.CallOption) (*ClientUpdateResponse, error)
	ListPlayer(ctx context.Context, in *ListPlayerRequest, opts ...grpc.CallOption) (*ListPlayerResponse, error)
}

type presenceClient struct {
	cc grpc.ClientConnInterface
}

func NewPresenceClient(cc grpc.ClientConnInterface) PresenceClient {
	return &presenceClient{cc}
}

func (c *presenceClient) ServerUpdate(ctx context.Context, in *ServerUpdateRequest, opts ...grpc.CallOption) (*ServerUpdateResponse, error) {
	out := new(ServerUpdateResponse)
	err := c.cc.Invoke(ctx, "/presence.Presence/ServerUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *presenceClient) ClientUpdate(ctx context.Context, in *ClientUpdateRequest, opts ...grpc.CallOption) (*ClientUpdateResponse, error) {
	out := new(ClientUpdateResponse)
	err := c.cc.Invoke(ctx, "/presence.Presence/ClientUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *presenceClient) ListPlayer(ctx context.Context, in *ListPlayerRequest, opts ...grpc.CallOption) (*ListPlayerResponse, error) {
	out := new(ListPlayerResponse)
	err := c.cc.Invoke(ctx, "/presence.Presence/ListPlayer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PresenceServer is the server API for Presence service.
// All implementations must embed UnimplementedPresenceServer
// for forward compatibility
type PresenceServer interface {
	ServerUpdate(context.Context, *ServerUpdateRequest) (*ServerUpdateResponse, error)
	ClientUpdate(context.Context, *ClientUpdateRequest) (*ClientUpdateResponse, error)
	ListPlayer(context.Context, *ListPlayerRequest) (*ListPlayerResponse, error)
	mustEmbedUnimplementedPresenceServer()
}

// UnimplementedPresenceServer must be embedded to have forward compatible implementations.
type UnimplementedPresenceServer struct {
}

func (UnimplementedPresenceServer) ServerUpdate(context.Context, *ServerUpdateRequest) (*ServerUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ServerUpdate not implemented")
}
func (UnimplementedPresenceServer) ClientUpdate(context.Context, *ClientUpdateRequest) (*ClientUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClientUpdate not implemented")
}
func (UnimplementedPresenceServer) ListPlayer(context.Context, *ListPlayerRequest) (*ListPlayerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPlayer not implemented")
}
func (UnimplementedPresenceServer) mustEmbedUnimplementedPresenceServer() {}

// UnsafePresenceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PresenceServer will
// result in compilation errors.
type UnsafePresenceServer interface {
	mustEmbedUnimplementedPresenceServer()
}

func RegisterPresenceServer(s grpc.ServiceRegistrar, srv PresenceServer) {
	s.RegisterService(&Presence_ServiceDesc, srv)
}

func _Presence_ServerUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServerUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PresenceServer).ServerUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/presence.Presence/ServerUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PresenceServer).ServerUpdate(ctx, req.(*ServerUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Presence_ClientUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClientUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PresenceServer).ClientUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/presence.Presence/ClientUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PresenceServer).ClientUpdate(ctx, req.(*ClientUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Presence_ListPlayer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPlayerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PresenceServer).ListPlayer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/presence.Presence/ListPlayer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PresenceServer).ListPlayer(ctx, req.(*ListPlayerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Presence_ServiceDesc is the grpc.ServiceDesc for Presence service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Presence_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "presence.Presence",
	HandlerType: (*PresenceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ServerUpdate",
			Handler:    _Presence_ServerUpdate_Handler,
		},
		{
			MethodName: "ClientUpdate",
			Handler:    _Presence_ClientUpdate_Handler,
		},
		{
			MethodName: "ListPlayer",
			Handler:    _Presence_ListPlayer_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/presence.proto",
}
